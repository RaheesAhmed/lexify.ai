// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String    @db.Text
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  comments      Comment[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id              String    @id @default(cuid())
  title           String
  content         String    @db.Text
  content_preview String?   @db.Text
  metadata        Json?
  file_url        String?
  file_type       String?
  file_size       Int?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments        Comment[]

  @@index([userId])
  @@index([title])
  @@index([content(ops: raw("gin_trgm_ops"))], type: Gin)
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  startIndex Int
  endIndex   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  documentId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  replies    Reply[]

  @@index([userId])
  @@index([documentId])
}

model Reply {
  id         String   @id @default(cuid())
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  commentId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([commentId])
}
